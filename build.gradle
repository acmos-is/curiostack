/*
 * MIT License
 *
 * Copyright (c) 2017 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'http://dl.bintray.com/curioswitch/curiostack'
        }
        maven {
            url 'http://palantir.bintray.com/releases'
        }
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.1.0'
        classpath 'com.palantir:gradle-baseline-java:0.11.1'
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.9'
        classpath 'org.curioswitch.curiostack:gradle-curio-server-plugin:0.0.1'
        classpath 'org.curioswitch.curiostack:gradle-gcloud-plugin:0.0.2'
        classpath 'org.curioswitch.curiostack:gradle-grpc-api-plugin:0.0.1'
    }
}

plugins {
    id 'com.gorylenko.gradle-git-properties' version '1.4.17' apply false
    id 'com.jfrog.artifactory' version '3.1.2' apply false
    id 'com.jfrog.bintray' version '1.7.3' apply false
}

// Provides useful tasks like 'clean', 'assemble' to the root project.
apply plugin: 'base'

apply plugin: 'com.palantir.baseline-config'
apply plugin: 'com.palantir.baseline-idea'

apply plugin: 'org.curioswitch.gradle-gcloud-plugin'
apply plugin: 'org.curioswitch.gradle-monorepo-circleci-plugin'

apply from: './build-java.gradle'

allprojects {
    plugins.withType(JavaPlugin) {
        license {
            header rootProject.file('LICENSE')
            mapping {
                conf = 'DOUBLESLASH_STYLE'
                yml = 'SCRIPT_STYLE'
            }
        }
    }
    plugins.withType(com.google.protobuf.gradle.ProtobufPlugin) {
        // Protobuf plugin doesn't add proto sourceset to allSource, which seems like an omission.
        // We add it to make sure license plugin picks up the files.
        sourceSets.each({ sourceSet ->
            sourceSet.allSource.source(sourceSet.proto)
        })
        license {
            mapping {
                proto = 'JAVADOC_STYLE'
            }
        }
    }

    plugins.withType(org.gradle.api.publish.maven.plugins.MavenPublishPlugin) {
        project.apply plugin: 'com.jfrog.artifactory'
        project.apply plugin: 'com.jfrog.bintray'

        def bintrayUser = findProperty('bintray.user')
        def bintrayKey = findProperty('bintray.key')

        artifactory {
            contextUrl = 'http://oss.jfrog.org/artifactory'

            publish {
                repository {
                    repoKey = 'oss-snapshot-local'
                    username = bintrayUser
                    password = bintrayKey
                }
            }
        }

        afterEvaluate {
            bintray {
                publish = true
                user = bintrayUser
                key = bintrayKey
                pkg {
                    name = project.archivesBaseName
                    repo = 'curiostack'
                    userOrg = 'curioswitch'
                    licenses = ['MIT']
                    vcsUrl = 'https://github.com/curioswitch/curiostack.git'
                    githubRepo = 'curioswitch/curiostack'
                    version {
                        name = project.version
                        gpg {
                            // Use bintray's keys for signing since there isn't much of a difference
                            // in security vs giving them your own private keys - either way bintray
                            // is trusted as the identity provider of your packages.
                            sign = true
                        }
                    }
                }
                publications = ['maven']
            }

            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.java

                        artifactId = project.archivesBaseName

                        artifact project.tasks.javadocJar
                        artifact project.tasks.sourceJar

                        pom.withXml {
                            asNode().children()[3] + {
                                resolveStrategy = Closure.DELEGATE_FIRST

                                licenses {
                                    license {
                                        name 'MIT License'
                                        url 'https://opensource.org/licenses/MIT'
                                        distribution 'repo'
                                    }
                                }
                                developers {
                                    developer {
                                        id 'chokoswitch'
                                        name 'Choko'
                                        email 'choko@curioswitch.org'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

gcloud {
    clusterBaseName = 'curioswitch'
    cloudRegion = 'asia-northeast1'
    clusterKubernetesVersion = '1.6.1'
}

idea.project.ipr.withXml {
    def compilerConfiguration = it.node.component.find { it.@name == 'CompilerConfiguration' }
    compilerConfiguration.remove(compilerConfiguration.annotationProcessing)
    compilerConfiguration.append(new groovy.util.NodeBuilder().annotationProcessing() {
        profile(name: 'Default', enabled: true, default: true) {
            outputRelativeToContentRoot(value: true)
            processorPath(useClasspath: true)
            sourceOutputDir(name: '.')
            sourceTestOutputDir(name: '.')
        }
    })
}
