/*
 * MIT License
 *
 * Copyright (c) 2017 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

def jacksonVersion = '2.8.7'
def dependencyVersions = [
        [ 'com.bmuschko', '3.0.5', [ 'gradle-docker-plugin' ]],
        [ 'com.fasterxml.jackson.core', jacksonVersion, [
                'jackson-core',
                'jackson-databind',
        ]],
        [ 'com.fasterxml.jackson.dataformat', jacksonVersion, [
                'jackson-dataformat-yaml',
        ]],
        [ 'com.google.cloud', '0.9.4-alpha', [
                'google-cloud-resourcemanager',
        ]],
        [ 'com.google.dagger', '2.9', [ 'dagger', 'dagger-compiler' ]],
        [ 'com.google.guava', '21.0', [ 'guava', 'guava-testlib' ]],
        [ 'com.google.protobuf', '3.2.0', [ 'protoc' ]],
        [ 'com.google.protobuf', '0.8.1', [ 'protobuf-gradle-plugin' ]],
        [ 'com.linecorp.armeria', '0.40.0', [ 'armeria', 'armeria-grpc' ]],
        [ 'com.typesafe', '1.3.1', [ 'config' ]],
        [ 'io.grpc', '1.1.2', [ 'grpc-core', 'grpc-protobuf', 'grpc-stub' ]],
        [ 'io.spring.gradle', '1.0.0.RELEASE', [ 'dependency-management-plugin' ]],
        [ 'javax.inject', '1', 'javax.inject' ],
        [ 'junit', '4.12', [ 'junit' ]],
        [ 'org.apache.logging.log4j', '2.8.1', [
                'log4j-api',
                'log4j-core',
                'log4j-jcl',
                'log4j-jul',
                'log4j-slf4j-impl',
        ]],
        [ 'org.assertj', '3.6.2', [ 'assertj-core' ]],
        [ 'org.eclipse.jgit', '4.6.0.201612231935-r', [ 'org.eclipse.jgit' ]],
        [ 'org.immutables', '2.4.4', [ 'builder', 'value' ]],
]

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    plugins.withType(JavaPlugin) {
        project.apply plugin: 'com.diffplug.gradle.spotless'
        project.apply plugin: 'com.github.hierynomus.license'
        project.apply plugin: 'com.palantir.baseline-idea'
        project.apply plugin: 'io.spring.dependency-management'

        group = 'org.curioswitch.curiostack'

        tasks.withType(JavaCompile) {
            options.incremental = true
        }

        [sourceSets.main, sourceSets.test].each { sourceSet ->
            // HACK: Configurations usually use the same naming logic/scheme as for tasks
            def aptConfiguration = configurations.create(sourceSet.getTaskName('', 'apt'))
            configurations.getByName(sourceSet.getTaskName('', 'compileOnly'))
                    .extendsFrom(aptConfiguration)

            def outputDir = "$buildDir/generated/source/apt/${sourceSet.name}"
            tasks.getByName(sourceSet.compileJavaTaskName) {
                options.annotationProcessorPath = aptConfiguration
                options.compilerArgs += ['-s', outputDir]
                doFirst {
                    project.mkdir(outputDir)
                }
            }

            project.plugins.withType(IdeaPlugin) {
                project.idea.module {
                    if (sourceSet == sourceSets.main) {
                        sourceDirs += file(outputDir)
                    } else {
                        testSourceDirs += file(outputDir)
                    }
                    generatedSourceDirs += file(outputDir)
                }
            }
        }

        // While Gradle attempts to generate a unique module name automatically,
        // it doesn't seem to always work properly, so we just always use unique
        // module names.
        project.idea.module {
            def moduleName = project.name
            def ancestor = project.parent
            while (ancestor != null && ancestor != project.rootProject) {
                moduleName = "${ancestor.name}-${moduleName}"
                ancestor = ancestor.parent
            }
            name = moduleName
        }

        dependencyManagement {
            dependencies {
                dependencyVersions.each { group ->
                    dependencySet(group: group[0], version: group[1]) {
                        group[2].each {
                            entry it
                        }
                    }
                }
            }
        }

        dependencies {
            testCompile 'org.assertj:assertj-core'
            testCompile 'junit:junit'
        }

        spotless {
            java {
                googleJavaFormat()
            }
        }
    }
}
