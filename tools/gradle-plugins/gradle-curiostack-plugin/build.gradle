import groovy.io.GroovyPrintStream
import nl.javadude.gradle.plugins.license.License

import java.nio.file.Paths

/*
 * MIT License
 *
 * Copyright (c) 2017 Choko (choko@curioswitch.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'java-gradle-plugin'
}

apply plugin: 'maven-publish'

def baselineManifestDir = project.file("$buildDir/gen-baseline")
sourceSets {
    main {
        resources {
            srcDir rootProject.file('.baseline')
        }
        output.dir(baselineManifestDir, builtBy: 'generateBaselineManifest')
    }
}

task generateBaselineManifest {
    doLast {
        project.file("$baselineManifestDir/META-INF/").mkdirs()
        GroovyPrintStream out = new GroovyPrintStream(project.file("$baselineManifestDir/META-INF/org.curioswitch.curiostack.baseline_manifest.txt"))
        def baselineDir = rootProject.file('.baseline')
        baselineDir.eachFileRecurse(groovy.io.FileType.FILES) {file ->
            out.println Paths.get(baselineDir.path).relativize(Paths.get(file.path))
        }
        out.close()
    }
}

dependencies {
    compile project(':tools:gradle-plugins:gradle-curio-server-plugin')
    compile project(':tools:gradle-plugins:gradle-curio-web-plugin')
    compile project(':tools:gradle-plugins:gradle-gcloud-plugin')
    compile project(':tools:gradle-plugins:gradle-grpc-api-plugin')
    compile project(':tools:gradle-plugins:gradle-monorepo-circleci-plugin')

    compile 'com.diffplug.spotless:spotless-plugin-gradle'
    compile 'com.jfrog.bintray.gradle:gradle-bintray-plugin'
    compile 'com.palantir:gradle-baseline-java'
    compile 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties'
    compile 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin'
    compile 'io.spring.gradle:dependency-management-plugin'

    apt 'org.immutables:value'
    compileOnly group: 'org.immutables', name: 'value', classifier: 'annotations'
}

gradlePlugin {
    plugins {
        simplePlugin {
            id = 'org.curioswitch.gradle-curiostack-plugin'
            implementationClass = 'org.curioswitch.gradle.plugins.curiostack.CuriostackPlugin'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom.withXml {
                // TODO(choko): Make it simpler to define pom attributes after the artifact, as is
                // normal, by defining a DSL or something.
                asNode().children()[3] + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name 'Gradle Curiostack Plugin'
                    description 'A highly opinionated plugin for setting up a gradle codebase ' +
                            'using Curiostack conventions. Defines shared configuration and ' +
                            'applies other useful plugins in an aim to be the only plugin in a ' +
                            'root project.'
                    url 'https://github.com/curioswitch/curiostack/tree/master/' +
                            'tools/gradle-plugins/gradle-curiostack-plugin'
                }
            }
        }
    }
}

// TODO(choko): Figure out how to disable license check of baseline config and reenable.
tasks.withType(License) {
    enabled = false
}
